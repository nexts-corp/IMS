;#include <mega2560.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdlib.h>
;#include <string.h>
;#include <delay.h>
;#include <stdio.h>
;#include "nx_io.h"
;
;#define ADC_VREF_TYPE 0x00
;
;// Read the ADC conversion result
;// Analog 0-1024 Port PF0 - PF8 (A0-A7)
;// Analog (-512)-512 Port PK0 - PK8 (A8-A15)
;// example
;// init_analogpin(A0);
;unsigned int analog_read(unsigned char adc_input)
; 0001 0010 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 0011       ADMUX = (0<<REFS1)|(1<<REFS0)|adc_input;
;PCODE: $0000000F VOL: 0
;	adc_input -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0001 0012       ADCSRA |=(1<<ADSC);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0001 0013       while(!(ADCSRA&(1<<ADIF)));
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0001 0014       return ADCW;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0001 0015 }
;PCODE: $0000001F VOL: 0
;
;void init_analogpin(unsigned int pin)
; 0001 0018 {
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0001 0019 
; 0001 001A       ACSR=0x80;
;PCODE: $00000022 VOL: 0
;	pin -> Y+0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0001 001B       ADCSRB=0x00;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0001 001C       DIDR1=0x00;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0001 001D       DIDR0=0x00;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0001 001E       DIDR2=0x00;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0001 001F       ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0001 0020       ADCSRA=0x83;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0001 0021 }
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;
;void Set_PWM(char ch ,int duty )
; 0001 0024 {
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0001 0025     switch (ch)
;PCODE: $00000036 VOL: 0
;	ch -> Y+2
;	duty -> Y+0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0001 0026     {
; 0001 0027         case 1: DDRB |= (1 << DDB7);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0001 0028                 //OCR0A = 50;
; 0001 0029                 TCCR0A |= (1 << COM0A1);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0001 002A                 // set non-inverting mode
; 0001 002B                 TCCR0A |= (1 << WGM01) | (1 << WGM00);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0001 002C                 // set 10bit phase corrected PWM Mode
; 0001 002D                 TCCR0B |= (1 << CS01);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0001 002E                 // set prescaler to 8 and starts PWM
; 0001 002F                 OCR0A = duty;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0001 0030                 break;
;PCODE: $00000048 VOL: 0
; 0001 0031         case 2:
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0001 0032                 DDRB |= (1 << DDB4);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0001 0033                  //OCR0A = 50;
; 0001 0034                 TCCR2A |= (1 << COM2A1);
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0001 0035                 // set non-inverting mode
; 0001 0036                 TCCR2A |= (1 << WGM21) | (1 << WGM20);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0001 0037                 // set 10bit phase corrected PWM Mode
; 0001 0038                 TCCR2B |= (1 << CS21);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0001 0039                 OCR2A = duty;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0001 003A                 // set prescaler to 8 and starts PWM
; 0001 003B                 break;
;PCODE: $00000059 VOL: 0
; 0001 003C     }
;PCODE: $0000005A VOL: 0
; 0001 003D 
; 0001 003E }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;
