;#include <mega2560.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <string.h>
;#include <ctype.h>
;#include <delay.h>
;
;
;
;#include "nx_io.h"
;#include "nx_usart.h"
;#include "nx_config.h"
;
;void main(void)
; 0000 000E {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 000F       int ADC=0;
; 0000 0010       int duty=0;
; 0000 0011       config_mcu(); //config ALL MCU AT mega 2560
;	ADC -> R16,R17
;	duty -> R18,R19
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0012       init_portin(PF); //init port PF is input
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0013       init_analogpin(A0); //init pin A0 is analogp input
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0014       init_uart(1,38400); //init Uart CH1 Baudrate 38400
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0015 
; 0000 0016       while(1)
;PCODE: $0000001C VOL: 0
; 0000 0017       {
; 0000 0018            Set_PWM(1 ,duty); //Set output PWM CH1  = duty
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0019            Set_PWM(2 ,duty); //Set output PWM CH2  = duty
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 001A 
; 0000 001B            ADC = analog_read(A0); //Read analogp input A0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 001C            printDebug("Read ADC CH0 : %d\r\n",ADC);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 001D            delay_ms(500);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 001E            duty=duty+50;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 001F            if(duty>255)
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0020            {
; 0000 0021                 duty=0;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0022            }
; 0000 0023 
; 0000 0024 
; 0000 0025       }
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0026 
; 0000 0027 }
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;
;
;
;
