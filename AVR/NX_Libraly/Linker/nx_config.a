;#include <mega2560.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <string.h>
;#include <ctype.h>
;#include <delay.h>
;
;#include "nx_config.h"
;
;void config_mcu()
; 0003 000A {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0003 000B       // Declare your local variables here
; 0003 000C 
; 0003 000D       // Crystal Oscillator division factor: 1
; 0003 000E       #pragma optsize-
; 0003 000F       CLKPR=0x80;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0003 0010       CLKPR=0x00;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0003 0011       #ifdef _OPTIMIZE_SIZE_
; 0003 0012       #pragma optsize+
; 0003 0013       #endif
; 0003 0014 
; 0003 0015       // Reset Source checking
; 0003 0016       if (MCUSR & 1)
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0003 0017       {
; 0003 0018             // Power-on Reset
; 0003 0019             MCUSR&=0xE0;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0003 001A             // Place your code here
; 0003 001B 
; 0003 001C       }
; 0003 001D       else if (MCUSR & 2)
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0003 001E       {
; 0003 001F             // External Reset
; 0003 0020             MCUSR&=0xE0;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0003 0021             // Place your code here
; 0003 0022 
; 0003 0023       }
; 0003 0024       else if (MCUSR & 4)
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0003 0025       {
; 0003 0026             // Brown-Out Reset
; 0003 0027             MCUSR&=0xE0;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0003 0028             // Place your code here
; 0003 0029 
; 0003 002A       }
; 0003 002B       else if (MCUSR & 8)
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0003 002C       {
; 0003 002D             // Watchdog Reset
; 0003 002E             MCUSR&=0xE0;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0003 002F             // Place your code here
; 0003 0030 
; 0003 0031       }
; 0003 0032       else if (MCUSR & 0x10)
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0003 0033       {
; 0003 0034             // JTAG Reset
; 0003 0035             MCUSR&=0xE0;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0003 0036             // Place your code here
; 0003 0037 
; 0003 0038       }
; 0003 0039       DIDR1=0xff;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0003 003A       DIDR0=0xff;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0003 003B }
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
